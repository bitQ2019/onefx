"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.initServerI18n = initServerI18n;
exports.initClientI18n = initClientI18n;
exports.t = void 0;
const baseLang = "en";

let t = (msgKey, _) => msgKey;

exports.t = t;

function getStr(translations, msgKey, data) {
  let unformatedMsg = translations[msgKey] || msgKey;

  if (unformatedMsg === "null") {
    unformatedMsg = "";
  }

  return formatString(unformatedMsg, data);
}

function initServerI18n(ctx) {
  const locale = ctx.i18n.getLocale();
  const translations = ctx.i18n.locales[locale];
  const baseTranslations = ctx.i18n.locales[baseLang];
  Object.keys(baseTranslations).forEach((key) => {
    translations[key] = translations[key] || baseTranslations[key];
  });
  const supportedLocales = Object.keys(ctx.i18n.locales);
  ctx.setState("base.translations", translations);
  ctx.setState("base.locale", locale);
  ctx.setState("base.supportedLocales", supportedLocales);

  ctx.t = (msgKey, data) => getStr(translations, msgKey, data);
}

function initClientI18n(translations) {
  exports.t = t = (msgKey, data) => getStr(translations, msgKey, data);
}

function formatString(str, data) {
  if (!data) {
    return str;
  }

  let processed = str;
  Object.keys(data).forEach((key) => {
    processed = processed.replace(`\${${key}}`, data[key]);
  });
  return processed;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pc28taTE4bi50cyJdLCJuYW1lcyI6WyJiYXNlTGFuZyIsInQiLCJtc2dLZXkiLCJfIiwiZ2V0U3RyIiwidHJhbnNsYXRpb25zIiwiZGF0YSIsInVuZm9ybWF0ZWRNc2ciLCJmb3JtYXRTdHJpbmciLCJpbml0U2VydmVySTE4biIsImN0eCIsImxvY2FsZSIsImkxOG4iLCJnZXRMb2NhbGUiLCJsb2NhbGVzIiwiYmFzZVRyYW5zbGF0aW9ucyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic3VwcG9ydGVkTG9jYWxlcyIsInNldFN0YXRlIiwiaW5pdENsaWVudEkxOG4iLCJzdHIiLCJwcm9jZXNzZWQiLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVBLE1BQU1BLFFBQVEsR0FBRyxJQUFqQjs7QUFJTyxJQUFJQyxDQUFZLEdBQUcsQ0FBQ0MsTUFBRCxFQUFpQkMsQ0FBakIsS0FBOEJELE1BQWpEOzs7O0FBRVAsU0FBU0UsTUFBVCxDQUFnQkMsWUFBaEIsRUFBb0NILE1BQXBDLEVBQW9ESSxJQUFwRCxFQUF5RTtBQUN2RSxNQUFJQyxhQUFhLEdBQUdGLFlBQVksQ0FBQ0gsTUFBRCxDQUFaLElBQXdCQSxNQUE1Qzs7QUFDQSxNQUFJSyxhQUFhLEtBQUssTUFBdEIsRUFBOEI7QUFDNUJBLElBQUFBLGFBQWEsR0FBRyxFQUFoQjtBQUNEOztBQUNELFNBQU9DLFlBQVksQ0FBQ0QsYUFBRCxFQUFnQkQsSUFBaEIsQ0FBbkI7QUFDRDs7QUFFTSxTQUFTRyxjQUFULENBQXdCQyxHQUF4QixFQUE0QztBQUNqRCxRQUFNQyxNQUFNLEdBQUdELEdBQUcsQ0FBQ0UsSUFBSixDQUFTQyxTQUFULEVBQWY7QUFDQSxRQUFNUixZQUFZLEdBQUdLLEdBQUcsQ0FBQ0UsSUFBSixDQUFTRSxPQUFULENBQWlCSCxNQUFqQixDQUFyQjtBQUNBLFFBQU1JLGdCQUFnQixHQUFHTCxHQUFHLENBQUNFLElBQUosQ0FBU0UsT0FBVCxDQUFpQmQsUUFBakIsQ0FBekI7QUFDQWdCLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixnQkFBWixFQUE4QkcsT0FBOUIsQ0FBc0NDLEdBQUcsSUFBSTtBQUMzQ2QsSUFBQUEsWUFBWSxDQUFDYyxHQUFELENBQVosR0FBb0JkLFlBQVksQ0FBQ2MsR0FBRCxDQUFaLElBQXFCSixnQkFBZ0IsQ0FBQ0ksR0FBRCxDQUF6RDtBQUNELEdBRkQ7QUFHQSxRQUFNQyxnQkFBZ0IsR0FBR0osTUFBTSxDQUFDQyxJQUFQLENBQVlQLEdBQUcsQ0FBQ0UsSUFBSixDQUFTRSxPQUFyQixDQUF6QjtBQUNBSixFQUFBQSxHQUFHLENBQUNXLFFBQUosQ0FBYSxtQkFBYixFQUFrQ2hCLFlBQWxDO0FBQ0FLLEVBQUFBLEdBQUcsQ0FBQ1csUUFBSixDQUFhLGFBQWIsRUFBNEJWLE1BQTVCO0FBQ0FELEVBQUFBLEdBQUcsQ0FBQ1csUUFBSixDQUFhLHVCQUFiLEVBQXNDRCxnQkFBdEM7O0FBRUFWLEVBQUFBLEdBQUcsQ0FBQ1QsQ0FBSixHQUFRLENBQUNDLE1BQUQsRUFBaUJJLElBQWpCLEtBQWdDRixNQUFNLENBQUNDLFlBQUQsRUFBZUgsTUFBZixFQUF1QkksSUFBdkIsQ0FBOUM7QUFDRDs7QUFFTSxTQUFTZ0IsY0FBVCxDQUF3QmpCLFlBQXhCLEVBQWtEO0FBQ3ZELGNBQUFKLENBQUMsR0FBRyxDQUFDQyxNQUFELEVBQWlCSSxJQUFqQixLQUFpQ0YsTUFBTSxDQUFDQyxZQUFELEVBQWVILE1BQWYsRUFBdUJJLElBQXZCLENBQTNDO0FBQ0Q7O0FBRUQsU0FBU0UsWUFBVCxDQUFzQmUsR0FBdEIsRUFBbUNqQixJQUFuQyxFQUF3RDtBQUN0RCxNQUFJLENBQUNBLElBQUwsRUFBVztBQUNULFdBQU9pQixHQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsU0FBUyxHQUFHRCxHQUFoQjtBQUNBUCxFQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWVgsSUFBWixFQUFrQlksT0FBbEIsQ0FBMEJDLEdBQUcsSUFBSTtBQUMvQkssSUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQUNDLE9BQVYsQ0FBbUIsTUFBS04sR0FBSSxHQUE1QixFQUFnQ2IsSUFBSSxDQUFDYSxHQUFELENBQXBDLENBQVo7QUFDRCxHQUZEO0FBSUEsU0FBT0ssU0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGV4dCwgRGljdCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmNvbnN0IGJhc2VMYW5nID0gXCJlblwiO1xuXG50eXBlIFRyYW5zbGF0ZSA9IChtc2dLZXk6IHN0cmluZywgZGF0YT86IERpY3QpID0+IHN0cmluZztcblxuZXhwb3J0IGxldCB0OiBUcmFuc2xhdGUgPSAobXNnS2V5OiBzdHJpbmcsIF8/OiBEaWN0KSA9PiBtc2dLZXk7XG5cbmZ1bmN0aW9uIGdldFN0cih0cmFuc2xhdGlvbnM6IERpY3QsIG1zZ0tleTogc3RyaW5nLCBkYXRhPzogRGljdCk6IHN0cmluZyB7XG4gIGxldCB1bmZvcm1hdGVkTXNnID0gdHJhbnNsYXRpb25zW21zZ0tleV0gfHwgbXNnS2V5O1xuICBpZiAodW5mb3JtYXRlZE1zZyA9PT0gXCJudWxsXCIpIHtcbiAgICB1bmZvcm1hdGVkTXNnID0gXCJcIjtcbiAgfVxuICByZXR1cm4gZm9ybWF0U3RyaW5nKHVuZm9ybWF0ZWRNc2csIGRhdGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNlcnZlckkxOG4oY3R4OiBDb250ZXh0KTogdm9pZCB7XG4gIGNvbnN0IGxvY2FsZSA9IGN0eC5pMThuLmdldExvY2FsZSgpO1xuICBjb25zdCB0cmFuc2xhdGlvbnMgPSBjdHguaTE4bi5sb2NhbGVzW2xvY2FsZV07XG4gIGNvbnN0IGJhc2VUcmFuc2xhdGlvbnMgPSBjdHguaTE4bi5sb2NhbGVzW2Jhc2VMYW5nXTtcbiAgT2JqZWN0LmtleXMoYmFzZVRyYW5zbGF0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgIHRyYW5zbGF0aW9uc1trZXldID0gdHJhbnNsYXRpb25zW2tleV0gfHwgYmFzZVRyYW5zbGF0aW9uc1trZXldO1xuICB9KTtcbiAgY29uc3Qgc3VwcG9ydGVkTG9jYWxlcyA9IE9iamVjdC5rZXlzKGN0eC5pMThuLmxvY2FsZXMpO1xuICBjdHguc2V0U3RhdGUoXCJiYXNlLnRyYW5zbGF0aW9uc1wiLCB0cmFuc2xhdGlvbnMpO1xuICBjdHguc2V0U3RhdGUoXCJiYXNlLmxvY2FsZVwiLCBsb2NhbGUpO1xuICBjdHguc2V0U3RhdGUoXCJiYXNlLnN1cHBvcnRlZExvY2FsZXNcIiwgc3VwcG9ydGVkTG9jYWxlcyk7XG5cbiAgY3R4LnQgPSAobXNnS2V5OiBzdHJpbmcsIGRhdGE6IERpY3QpID0+IGdldFN0cih0cmFuc2xhdGlvbnMsIG1zZ0tleSwgZGF0YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0Q2xpZW50STE4bih0cmFuc2xhdGlvbnM6IERpY3QpOiB2b2lkIHtcbiAgdCA9IChtc2dLZXk6IHN0cmluZywgZGF0YT86IERpY3QpID0+IGdldFN0cih0cmFuc2xhdGlvbnMsIG1zZ0tleSwgZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFN0cmluZyhzdHI6IHN0cmluZywgZGF0YT86IERpY3QpOiBzdHJpbmcge1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgbGV0IHByb2Nlc3NlZCA9IHN0cjtcbiAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChrZXkgPT4ge1xuICAgIHByb2Nlc3NlZCA9IHByb2Nlc3NlZC5yZXBsYWNlKGBcXCR7JHtrZXl9fWAsIGRhdGFba2V5XSk7XG4gIH0pO1xuXG4gIHJldHVybiBwcm9jZXNzZWQ7XG59XG4iXX0=
