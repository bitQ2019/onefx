"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.initI18nMiddleware = initI18nMiddleware;

var _dottie = _interopRequireDefault(require("dottie"));

var _fs = _interopRequireDefault(require("fs"));

var _koaI18n = _interopRequireDefault(require("koa-i18n"));

var _koaLocale = _interopRequireDefault(require("koa-locale"));

var _isoI18n = require("../iso-i18n");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// @ts-ignore
// @ts-ignore
function prioritize(supportedLocales, langCode) {
  supportedLocales.sort((a, b) => {
    return a === langCode ? -1 : b === langCode ? 1 : 0;
  });
}

function initI18nMiddleware(server) {
  (0, _koaLocale.default)(server.app);
  let directory = "./translations";
  const preferredDir = `./${server.config.project}-translations`; // tslint:disable-next-line

  if (_fs.default.existsSync(preferredDir)) {
    directory = preferredDir;
  } // tslint:disable-next-line:non-literal-fs-path

  const filenames = _fs.default.readdirSync(directory) || [];
  const supportedLocales = filenames.map((f) =>
    f.split(".").slice(0, -1).join(".")
  );
  prioritize(supportedLocales, "en");
  server.logger.info(
    `load translations [${supportedLocales}] from ${directory}`
  );
  server.use(
    (0, _koaI18n.default)(server.app, {
      directory,
      locales: supportedLocales,
      modes: ["cookie", "query", "header"],
      extension: ".yaml",

      parse(data) {
        return require("js-yaml").safeLoad(data);
      },

      dump(data) {
        return require("js-yaml").safeDump(data);
      },
    })
  );
  server.use(async (ctx, next) => {
    const locale = String(_dottie.default.get(ctx, "request.query.locale"));

    if (locale && supportedLocales.indexOf(locale) !== -1) {
      ctx.cookies.set("locale", ctx.request.query.locale, {
        maxAge: 14 * 24 * 3600 * 1000,
      });
      ctx.i18n.setLocale(locale);
    }

    (0, _isoI18n.initServerI18n)(ctx);
    await next();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL2kxOG4tbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6WyJwcmlvcml0aXplIiwic3VwcG9ydGVkTG9jYWxlcyIsImxhbmdDb2RlIiwic29ydCIsImEiLCJiIiwiaW5pdEkxOG5NaWRkbGV3YXJlIiwic2VydmVyIiwiYXBwIiwiZGlyZWN0b3J5IiwicHJlZmVycmVkRGlyIiwiY29uZmlnIiwicHJvamVjdCIsImZzIiwiZXhpc3RzU3luYyIsImZpbGVuYW1lcyIsInJlYWRkaXJTeW5jIiwibWFwIiwiZiIsInNwbGl0Iiwic2xpY2UiLCJqb2luIiwibG9nZ2VyIiwiaW5mbyIsInVzZSIsImxvY2FsZXMiLCJtb2RlcyIsImV4dGVuc2lvbiIsInBhcnNlIiwiZGF0YSIsInJlcXVpcmUiLCJzYWZlTG9hZCIsImR1bXAiLCJzYWZlRHVtcCIsImN0eCIsIm5leHQiLCJsb2NhbGUiLCJTdHJpbmciLCJkb3R0eSIsImdldCIsImluZGV4T2YiLCJjb29raWVzIiwic2V0IiwicmVxdWVzdCIsInF1ZXJ5IiwibWF4QWdlIiwiaTE4biIsInNldExvY2FsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUVBOztBQUNBOzs7O0FBSkE7QUFFQTtBQU1BLFNBQVNBLFVBQVQsQ0FBb0JDLGdCQUFwQixFQUFxREMsUUFBckQsRUFBNkU7QUFDM0VELEVBQUFBLGdCQUFnQixDQUFDRSxJQUFqQixDQUFzQixDQUFDQyxDQUFELEVBQVlDLENBQVosS0FBMEI7QUFDOUMsV0FBT0QsQ0FBQyxLQUFLRixRQUFOLEdBQWlCLENBQUMsQ0FBbEIsR0FBc0JHLENBQUMsS0FBS0gsUUFBTixHQUFpQixDQUFqQixHQUFxQixDQUFsRDtBQUNELEdBRkQ7QUFHRDs7QUFFTSxTQUFTSSxrQkFBVCxDQUE0QkMsTUFBNUIsRUFBa0Q7QUFDdkQsMEJBQU9BLE1BQU0sQ0FBQ0MsR0FBZDtBQUNBLE1BQUlDLFNBQVMsR0FBRyxnQkFBaEI7QUFFQSxRQUFNQyxZQUFZLEdBQUksS0FBSUgsTUFBTSxDQUFDSSxNQUFQLENBQWNDLE9BQVEsZUFBaEQsQ0FKdUQsQ0FLdkQ7O0FBQ0EsTUFBSUMsWUFBR0MsVUFBSCxDQUFjSixZQUFkLENBQUosRUFBaUM7QUFDL0JELElBQUFBLFNBQVMsR0FBR0MsWUFBWjtBQUNELEdBUnNELENBVXZEOzs7QUFDQSxRQUFNSyxTQUFTLEdBQUdGLFlBQUdHLFdBQUgsQ0FBZVAsU0FBZixLQUE2QixFQUEvQztBQUNBLFFBQU1SLGdCQUFnQixHQUFHYyxTQUFTLENBQUNFLEdBQVYsQ0FBY0MsQ0FBQyxJQUN0Q0EsQ0FBQyxDQUNFQyxLQURILENBQ1MsR0FEVCxFQUVHQyxLQUZILENBRVMsQ0FGVCxFQUVZLENBQUMsQ0FGYixFQUdHQyxJQUhILENBR1EsR0FIUixDQUR1QixDQUF6QjtBQU1BckIsRUFBQUEsVUFBVSxDQUFDQyxnQkFBRCxFQUFtQixJQUFuQixDQUFWO0FBRUFNLEVBQUFBLE1BQU0sQ0FBQ2UsTUFBUCxDQUFjQyxJQUFkLENBQ0csc0JBQXFCdEIsZ0JBQWlCLFVBQVNRLFNBQVUsRUFENUQ7QUFJQUYsRUFBQUEsTUFBTSxDQUFDaUIsR0FBUCxDQUNFLHNCQUFLakIsTUFBTSxDQUFDQyxHQUFaLEVBQWlCO0FBQ2ZDLElBQUFBLFNBRGU7QUFFZmdCLElBQUFBLE9BQU8sRUFBRXhCLGdCQUZNO0FBR2Z5QixJQUFBQSxLQUFLLEVBQUUsQ0FBQyxRQUFELEVBQVcsT0FBWCxFQUFvQixRQUFwQixDQUhRO0FBSWZDLElBQUFBLFNBQVMsRUFBRSxPQUpJOztBQUtmQyxJQUFBQSxLQUFLLENBQUNDLElBQUQsRUFBdUI7QUFDMUIsYUFBT0MsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQkMsUUFBbkIsQ0FBNEJGLElBQTVCLENBQVA7QUFDRCxLQVBjOztBQVFmRyxJQUFBQSxJQUFJLENBQUNILElBQUQsRUFBdUI7QUFDekIsYUFBT0MsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQkcsUUFBbkIsQ0FBNEJKLElBQTVCLENBQVA7QUFDRDs7QUFWYyxHQUFqQixDQURGO0FBY0F0QixFQUFBQSxNQUFNLENBQUNpQixHQUFQLENBQVcsT0FBT1UsR0FBUCxFQUFxQkMsSUFBckIsS0FBb0M7QUFDN0MsVUFBTUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLGdCQUFNQyxHQUFOLENBQVVMLEdBQVYsRUFBZSxzQkFBZixDQUFELENBQXJCOztBQUNBLFFBQUlFLE1BQU0sSUFBSW5DLGdCQUFnQixDQUFDdUMsT0FBakIsQ0FBeUJKLE1BQXpCLE1BQXFDLENBQUMsQ0FBcEQsRUFBdUQ7QUFDckRGLE1BQUFBLEdBQUcsQ0FBQ08sT0FBSixDQUFZQyxHQUFaLENBQWdCLFFBQWhCLEVBQTBCUixHQUFHLENBQUNTLE9BQUosQ0FBWUMsS0FBWixDQUFrQlIsTUFBNUMsRUFBb0Q7QUFDbERTLFFBQUFBLE1BQU0sRUFBRSxLQUFLLEVBQUwsR0FBVSxJQUFWLEdBQWlCO0FBRHlCLE9BQXBEO0FBR0FYLE1BQUFBLEdBQUcsQ0FBQ1ksSUFBSixDQUFTQyxTQUFULENBQW1CWCxNQUFuQjtBQUNEOztBQUNELGlDQUFlRixHQUFmO0FBQ0EsVUFBTUMsSUFBSSxFQUFWO0FBQ0QsR0FWRDtBQVdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRvdHR5IGZyb20gXCJkb3R0aWVcIjtcbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBpMThuIGZyb20gXCJrb2EtaTE4blwiO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGxvY2FsZSBmcm9tIFwia29hLWxvY2FsZVwiO1xuaW1wb3J0IHsgaW5pdFNlcnZlckkxOG4gfSBmcm9tIFwiLi4vaXNvLWkxOG5cIjtcbmltcG9ydCB7IFNlcnZlciB9IGZyb20gXCIuLi9zZXJ2ZXJcIjtcbmltcG9ydCB7IENvbnRleHQsIE5leHQgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZnVuY3Rpb24gcHJpb3JpdGl6ZShzdXBwb3J0ZWRMb2NhbGVzOiBBcnJheTxzdHJpbmc+LCBsYW5nQ29kZTogc3RyaW5nKTogdm9pZCB7XG4gIHN1cHBvcnRlZExvY2FsZXMuc29ydCgoYTogc3RyaW5nLCBiOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYSA9PT0gbGFuZ0NvZGUgPyAtMSA6IGIgPT09IGxhbmdDb2RlID8gMSA6IDA7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEkxOG5NaWRkbGV3YXJlKHNlcnZlcjogU2VydmVyKTogdm9pZCB7XG4gIGxvY2FsZShzZXJ2ZXIuYXBwKTtcbiAgbGV0IGRpcmVjdG9yeSA9IFwiLi90cmFuc2xhdGlvbnNcIjtcblxuICBjb25zdCBwcmVmZXJyZWREaXIgPSBgLi8ke3NlcnZlci5jb25maWcucHJvamVjdH0tdHJhbnNsYXRpb25zYDtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gIGlmIChmcy5leGlzdHNTeW5jKHByZWZlcnJlZERpcikpIHtcbiAgICBkaXJlY3RvcnkgPSBwcmVmZXJyZWREaXI7XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm9uLWxpdGVyYWwtZnMtcGF0aFxuICBjb25zdCBmaWxlbmFtZXMgPSBmcy5yZWFkZGlyU3luYyhkaXJlY3RvcnkpIHx8IFtdO1xuICBjb25zdCBzdXBwb3J0ZWRMb2NhbGVzID0gZmlsZW5hbWVzLm1hcChmID0+XG4gICAgZlxuICAgICAgLnNwbGl0KFwiLlwiKVxuICAgICAgLnNsaWNlKDAsIC0xKVxuICAgICAgLmpvaW4oXCIuXCIpXG4gICk7XG4gIHByaW9yaXRpemUoc3VwcG9ydGVkTG9jYWxlcywgXCJlblwiKTtcblxuICBzZXJ2ZXIubG9nZ2VyLmluZm8oXG4gICAgYGxvYWQgdHJhbnNsYXRpb25zIFske3N1cHBvcnRlZExvY2FsZXN9XSBmcm9tICR7ZGlyZWN0b3J5fWBcbiAgKTtcblxuICBzZXJ2ZXIudXNlKFxuICAgIGkxOG4oc2VydmVyLmFwcCwge1xuICAgICAgZGlyZWN0b3J5LFxuICAgICAgbG9jYWxlczogc3VwcG9ydGVkTG9jYWxlcyxcbiAgICAgIG1vZGVzOiBbXCJjb29raWVcIiwgXCJxdWVyeVwiLCBcImhlYWRlclwiXSxcbiAgICAgIGV4dGVuc2lvbjogXCIueWFtbFwiLFxuICAgICAgcGFyc2UoZGF0YTogc3RyaW5nKTogb2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCJqcy15YW1sXCIpLnNhZmVMb2FkKGRhdGEpO1xuICAgICAgfSxcbiAgICAgIGR1bXAoZGF0YTogc3RyaW5nKTogb2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCJqcy15YW1sXCIpLnNhZmVEdW1wKGRhdGEpO1xuICAgICAgfVxuICAgIH0pXG4gICk7XG4gIHNlcnZlci51c2UoYXN5bmMgKGN0eDogQ29udGV4dCwgbmV4dDogTmV4dCkgPT4ge1xuICAgIGNvbnN0IGxvY2FsZSA9IFN0cmluZyhkb3R0eS5nZXQoY3R4LCBcInJlcXVlc3QucXVlcnkubG9jYWxlXCIpKTtcbiAgICBpZiAobG9jYWxlICYmIHN1cHBvcnRlZExvY2FsZXMuaW5kZXhPZihsb2NhbGUpICE9PSAtMSkge1xuICAgICAgY3R4LmNvb2tpZXMuc2V0KFwibG9jYWxlXCIsIGN0eC5yZXF1ZXN0LnF1ZXJ5LmxvY2FsZSwge1xuICAgICAgICBtYXhBZ2U6IDE0ICogMjQgKiAzNjAwICogMTAwMFxuICAgICAgfSk7XG4gICAgICBjdHguaTE4bi5zZXRMb2NhbGUobG9jYWxlKTtcbiAgICB9XG4gICAgaW5pdFNlcnZlckkxOG4oY3R4KTtcbiAgICBhd2FpdCBuZXh0KCk7XG4gIH0pO1xufVxuIl19
