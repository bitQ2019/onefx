"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.Server = void 0;

var _koa = _interopRequireDefault(require("koa"));

var _koaRouter = _interopRequireDefault(require("koa-router"));

var _methods = _interopRequireDefault(require("methods"));

var _os = require("os");

var _integratedGateways = require("./integrated-gateways/integrated-gateways");

var _middleware = require("./middleware");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

class Server {
  constructor(config) {
    this.config = config;
    this.gateways = new _integratedGateways.IntegratedGateways(config);
    this.processTitle = `nodejs-${config.project}-on-${(0, _os.hostname)()}`;
    this.app = new _koa.default();
    this.logger = this.gateways.logger;
    this.initRouter();
    this.app.keys = config.server.cookie.secrets;

    if (!this.config.server.delayInitMiddleware) {
      (0, _middleware.initMiddleware)(this);
    }
  }

  initMiddleware() {
    (0, _middleware.initMiddleware)(this);
  }

  initRouter() {
    const router = new _koaRouter.default();

    const setRouterOnVerb = (verb) => {
      // @ts-ignore
      this[verb] = (...argu) => {
        const args = [...argu];
        let koaRoute = args.shift();

        if (typeof args[0] === "string") {
          koaRoute = args.shift();
        }

        let routePrefix = this.config.server.routePrefix;

        if (routePrefix) {
          if (routePrefix[routePrefix.length - 1] !== "/") {
            routePrefix = `${routePrefix}/`;
          }

          if (koaRoute[0] === "/") {
            koaRoute = koaRoute.substr(1);
          }

          koaRoute = `${routePrefix}${koaRoute}`;
        }

        args.unshift(koaRoute); // @ts-ignore

        return router[verb](...args);
      };
    };

    _methods.default.forEach(setRouterOnVerb);

    setRouterOnVerb("all");
    this.router = router;
    this.app.use(router.routes());
  } // tslint:disable-next-line

  use(...args) {
    if (typeof args[0] === "function") {
      // default route to '/'
      args.unshift("/");
    }

    this.router.use(...args);
  }

  listen(port, done = (_) => null) {
    this.httpServer = this.app.listen(port, () => {
      this.logger.info(
        `${this.processTitle} listening on http://localhost:${port}`
      );
      return done(this);
    });
    return this.httpServer;
  }

  close(done = () => null) {
    this.gateways.close();

    if (this.httpServer) {
      this.httpServer.close(done);
    }
  }
}

exports.Server = Server;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
